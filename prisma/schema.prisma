// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  // New Relations for Build-in-Public Progress Board
  projects         Project[]
  categories       Category[]
  streakChallenges StreakChallenge[]
  dailyProgress    DailyProgress[]
  userBadges       UserBadge[]
  streakStats      UserStreakStats[]

  // Existing Relations
  sessions Session[]
  accounts Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// New Models for Build-in-Public Progress Board

model Project {
  id               String   @id @default(cuid())
  name             String
  description      String?
  categoryId       String
  userId           String
  targetStreakDays Int
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  category         Category          @relation(fields: [categoryId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  streakChallenges StreakChallenge[]
  dailyProgress    DailyProgress[]
  streakStats      UserStreakStats[]
  userBadges       UserBadge[]

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())

  // Relationships
  user     User      @relation(fields: [userId], references: [id])
  projects Project[]

  @@index([userId])
}

model StreakChallenge {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  dayNumber   Int
  targetDate  DateTime
  isPosted    Boolean  @default(false)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyProgress DailyProgress[]

  @@unique([projectId, dayNumber])
  @@index([userId])
  @@index([projectId])
}

model DailyProgress {
  id          String   @id @default(cuid())
  projectId   String
  streakDayId String
  userId      String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  streakDay StreakChallenge @relation(fields: [streakDayId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([streakDayId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  criteria    Int
  createdAt   DateTime @default(now())

  // Relationships
  userBadges UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  projectId String?
  earnedAt  DateTime @default(now())

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId, projectId])
  @@index([userId])
  @@index([badgeId])
}

model UserStreakStats {
  id                  String    @id @default(cuid())
  userId              String
  projectId           String
  currentStreak       Int       @default(0)
  longestStreak       Int       @default(0)
  totalPosts          Int       @default(0)
  challengesCompleted Int       @default(0)
  lastPostedDate      DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}
